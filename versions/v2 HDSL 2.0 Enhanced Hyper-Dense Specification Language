# HDSL 2.0 - Enhanced Hyper-Dense Specification Language

## Introduction

HDSL 2.0 (Hyper-Dense Specification Language) is an improved domain-specific language for defining software projects in a concise yet comprehensive format. This version incorporates learnings from real-world AI implementations, addressing clarity issues and adding precision to project specifications.

## Language Structure and Syntax

### Symbol Definitions
* §: Section marker
* @: Component/Entity marker
* #: Property/Field marker
* &: Inclusion/Composition marker
* ~: Relationship marker
* !: Command/Action marker
* ?: Condition marker
* $: Variable marker
* *: Required element marker
* `: String literal marker
* :: Type definition marker

### Core Sections

#### §PRJ: Project Information
Defines the overall project metadata.
```
§PRJ
*#name=`ProjectName`
*#type=`project-type` [frontend|backend|fullstack|prototype|component]
*#stack=[`Tech1`,`Tech2`,`Tech3`]
*#desc=`Project description`
#version=`1.0`
#team=`Team or company name`
```

#### §SCOPE: Project Scope and Deliverables
Explicitly defines what's in and out of scope.
```
§SCOPE
*!LEVEL:[PROTOTYPE|MVP|FULL]
*!IMPLEMENTATION:[UI_Only|UI_with_Mocks|Full_Stack]
!TIMEFRAME:`Short description of the timeframe`
!EXCLUSIONS:[`Feature1`,`Feature2`] # Explicitly excluded features
```

#### §ARC: Architecture
Defines the system architecture.
```
§ARC
*@Frontend
*&MainTechnology
&SupportingTechnology1
&SupportingTechnology2
~USE:@Backend:API

@Backend
&Technology1
&Technology2
~USE:@Database
```

#### §PRIORITY: Feature Priorities
Explicitly defines feature priorities.
```
§PRIORITY
*!P0:[MustHaveFeature1,MustHaveFeature2] # Critical for any implementation
!P1:[ShouldHaveFeature1,ShouldHaveFeature2] # Important but not critical
!P2:[NiceToHaveFeature1,NiceToHaveFeature2] # Only if time permits
```

#### §DEPENDENCY: Component Dependencies
Defines dependencies and build order.
```
§DEPENDENCY
@ComponentA>[ComponentB,ComponentC] # ComponentA depends on B and C
@ComponentD>ComponentE # ComponentD depends on E
```

#### §MOD: Data Models
Defines data structures with required/optional markers.
```
§MOD
@ModelName [CORE] # Core model that must be implemented
*#id::id
*#requiredField::type
#optionalField::type
~HAS:@OtherModel:items[]

@AnotherModel [OPTIONAL] # Optional model
#id::id
#name::s
```

#### §CMP: Components
Defines UI/system components with required/optional markers.
```
§CMP
@ComponentName [REQUIRED] # Must be implemented
*#props={requiredProp1,requiredProp2}
#optionalProps={prop1,prop2}
*&RequiredSubComponent
&OptionalSubComponent
~USE:@OtherComponent

@AnotherComponent [OPTIONAL] # May be omitted in initial release
#props={prop1,prop2}
```

#### §UI: UI Elements
Defines UI component design and behavior specifications.
```
§UI
@UIComponent
#variants=`primary,secondary,danger`
#states=`default,hover,active,disabled`
#accessibility=`WCAG AA compliance`
!STYL
```

#### §FLW: Workflows
Defines application workflows and user journeys.
```
§FLW
@MainFlow [REQUIRED]
#Step1: ComponentA > ComponentB
#Step2: ComponentB > [Condition] > ComponentC | ComponentD

@SecondaryFlow [OPTIONAL]
#Step1: ComponentE > ComponentF
```

#### §STL: Theme and Styling
Defines styling specifications.
```
§STL
@Theme
#colors={
  primary:`#hexcode`,
  secondary:`#hexcode`,
  accent:`#hexcode`
}
#typography={
  fontFamily:`'Font', sans-serif`,
  sizes:{
    h1:`2rem`,
    h2:`1.5rem`
  }
}
!RESP
```

#### §MVP: Minimum Viable Product Definition
Explicitly defines what constitutes the MVP.
```
§MVP
@Components=[Component1,Component2,Component3]
@Models=[Model1,Model2]
@Features=[Feature1,Feature2]
@Flows=[MainFlow]
```

#### §EXAMPLE: Implementation Examples
Provides concrete examples for key components.
```
§EXAMPLE
@ComponentName
#preview=`link-to-screenshot` # Visual reference
#sample=`
// Example code implementation
function ComponentName() {
  // Implementation details
}
`
```

#### §TEST: Test Scenarios
Defines test cases and scenarios.
```
§TEST
@ComponentName
#scenario_1=`Description of test scenario 1`
#expected_1=`Expected outcome of scenario 1`
#scenario_2=`Description of test scenario 2`
#expected_2=`Expected outcome of scenario 2`
```

#### §MOCK: Mock Data
Defines mock data requirements and examples.
```
§MOCK
@ModelName
!DATA:[
  {
    id: "example-id-1",
    field1: "Example value",
    field2: 42
  },
  // More examples
]
!GENERATOR:functionName() {
  // Mock data generation logic
}
```

#### §UI_DOCS: UI Documentation References
Links to visual design assets.
```
§UI_DOCS
@Wireframes=`url/to/wireframes`
@Mockups=`url/to/mockups`
@DesignSystem=`url/to/design-system`
@StyleGuide=`url/to/style-guide`
```

#### §INTEGRATION: Integration Points
Defines points of integration with external systems.
```
§INTEGRATION
@API
#endpoints={endpoint1,endpoint2,endpoint3}
#authentication=`OAuth2`
#dataFormat=`JSON`

@ExternalSystem
#connectionMethod=`REST`
#dataSync=`Bidirectional`
```

#### §USER_STORY: User Stories
Defines user stories for features.
```
§USER_STORY
@UserType
#story_1=`As a [role], I want to [action], so that [benefit]`
#components=[Component1,Component2]
#acceptance=[Criterion1,Criterion2]
```

#### §PRF: Performance Requirements
Defines performance expectations.
```
§PRF
!LOAD_TIME:<2s
!RESPONSE_TIME:<200ms
!CONCURRENT_USERS:100+
!OPT:OptimizationArea1
!OPT:OptimizationArea2
```

#### §SEC: Security Requirements
Defines security requirements.
```
§SEC
!AUTH:AuthMethod
!ENCRYPTION:EncryptionMethod
!COMPLIANCE:[Standard1,Standard2]
```

#### §DOC: Documentation Requirements
Defines required documentation.
```
§DOC
!README
!API_DOCS
!USER_GUIDE
!DEVELOPER_DOCS
```

## Implementation Guidelines

### Priority Handling
- All elements marked with * are required in any implementation
- Elements within sections marked [REQUIRED] must be implemented
- Elements within sections marked [CORE] must be included in the data model
- P0 features must be implemented in any version
- P1 features should be implemented in MVP if possible
- P2 features are only for full versions if time permits

### Scope Interpretation
- PROTOTYPE level implies visual functionality without full backend integration
- MVP level requires all P0 and most P1 features with essential backend integration
- FULL level requires all P0, P1 and selected P2 features fully implemented

### Component Relationships
- Components in a > relationship must be implemented in that order
- Components in a ~ relationship should be considered together
- Components in a & relationship are subcomponents of their parent